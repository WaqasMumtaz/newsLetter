{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/projects/DynamicNewsLetter/src/components/content/content.js\";\nimport React, { Component } from 'react';\nimport './content.css';\nimport SlidingPane from './slidingPane';\nimport ClosedLeftMenu from './closedLeftMenu';\nimport DrawingCanvas from './drawingCanvas';\nimport SlideContent from './slideContent';\nimport BackgroundImages from './backgroundImages';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport { Droppable } from 'react-beautiful-dnd';\nimport UploadFile from './uploadFile';\nimport Photos from './photos';\n\nclass Content extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isModalOpen: false,\n      selectedMenuOption: '',\n      draggingRowId: null,\n      starredProjects: {}\n    };\n\n    this.toggleState = e => {\n      this.setState({\n        isModalOpen: !this.state.isModalOpen\n      });\n    };\n\n    this.selectMenuOption = menuItem => {\n      console.log('selectMenuOption', menuItem);\n      this.setState({\n        selectedMenuOption: menuItem,\n        isModalOpen: !this.state.isModalOpen\n      });\n    };\n\n    this.onBeforeDragStart = () => {\n      /* ... */\n    };\n\n    this.onDragStart = event => {\n      // event.dataTransfer.setData(\"text\", event.target.id);\n      console.log('onstart event ==> ', event); // console.log('nativeEvent ==> ', event.nativeEvent); //<- gets native JS event\n\n      /* ... */\n    };\n\n    this.onDragUpdate = () => {\n      /* ... */\n    };\n\n    this.onDragEnd = result => {\n      // the only one that is required\n      const destination = result.destination,\n            source = result.source,\n            reason = result.reason;\n      console.log('source >>', source); //  console.log('Droppable item ID>>',destination.droppableId === source.droppableId);\n      // console.log('Index >>',destination.index === source.index);\n      // Not a thing to do...\n\n      if (!destination || reason === 'CANCEL') {\n        this.setState({\n          draggingRowId: null\n        });\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        console.log('Droppable item ID>>', destination.droppableId === source.droppableId);\n        console.log('Index >>', destination.index === source.index);\n      } // const starredProjects = Object.assign([], this.state.starredProjects);\n      // console.log('StarredProject >>', starredProjects)\n      // const project = this.state.starredProjects[source.index];\n      // console.log('Source index >>', source.index);\n      // starredProjects.splice(source.index, 1);\n      // starredProjects.splice(destination.index, 0, project);\n      // this.setState({\n      //   starredProjects\n      // });\n\n    };\n  }\n\n  render() {\n    const selectedOptionContent = {\n      background: React.createElement(BackgroundImages, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }),\n      file: React.createElement(UploadFile, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }),\n      photos: React.createElement(Photos, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      })\n    }[this.state.selectedMenuOption]; // console.log('selected content background>>', selectedOptionContent)\n\n    console.log('menu option array >>', [this.state.selectedMenuOption]);\n    return React.createElement(\"section\", {\n      className: \"mainSection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(DragDropContext, {\n      onBeforeDragStart: this.onBeforeDragStart,\n      onDragStart: this.onDragStart,\n      onDragUpdate: this.onDragUpdate,\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Droppable, {\n      droppableId: \"droppable\",\n      type: \"DRAWING\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      className: \"droppableSection\",\n      ref: provided.innerRef,\n      style: {\n        backgroundColor: snapshot.isDraggingOver ? '#ccc' : '#ececec'\n      }\n    }, provided.droppableProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), console.log('Provided >>', provided), React.createElement(\"div\", {\n      className: \"menuSection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(ClosedLeftMenu, {\n      selectMenuOption: this.selectMenuOption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    })), this.state.isModalOpen && React.createElement(SlidingPane, {\n      id: \"modal\",\n      isOpen: this.state.isModalOpen,\n      onClose: this.toggleState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(SlideContent, {\n      content: selectedOptionContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"canvasSection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"drawingCanvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Hello To The world\")))))));\n  }\n\n}\n\nexport default Content;","map":{"version":3,"sources":["/Users/mac/Desktop/projects/DynamicNewsLetter/src/components/content/content.js"],"names":["React","Component","SlidingPane","ClosedLeftMenu","DrawingCanvas","SlideContent","BackgroundImages","DragDropContext","Droppable","UploadFile","Photos","Content","state","isModalOpen","selectedMenuOption","draggingRowId","starredProjects","toggleState","e","setState","selectMenuOption","menuItem","console","log","onBeforeDragStart","onDragStart","event","onDragUpdate","onDragEnd","result","destination","source","reason","droppableId","index","render","selectedOptionContent","background","file","photos","provided","snapshot","innerRef","backgroundColor","isDraggingOver","droppableProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './content.css'\r\nimport SlidingPane from './slidingPane'\r\nimport ClosedLeftMenu from './closedLeftMenu'\r\nimport DrawingCanvas from './drawingCanvas'\r\nimport SlideContent from './slideContent'\r\nimport BackgroundImages from './backgroundImages'\r\nimport { DragDropContext } from 'react-beautiful-dnd';\r\nimport { Droppable } from 'react-beautiful-dnd';\r\nimport UploadFile from './uploadFile';\r\nimport Photos from './photos';\r\n\r\nclass Content extends Component {\r\n  state = {\r\n    isModalOpen: false,\r\n    selectedMenuOption: '',\r\n    draggingRowId:null,\r\n    starredProjects:{}\r\n    \r\n  }\r\n\r\n  toggleState = e => {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen\r\n    })\r\n  }\r\n  selectMenuOption = menuItem => {\r\n    console.log('selectMenuOption', menuItem)\r\n    this.setState({\r\n      selectedMenuOption: menuItem,\r\n      isModalOpen: !this.state.isModalOpen\r\n    })\r\n  }\r\n\r\n  onBeforeDragStart = () => {\r\n    /* ... */\r\n  }\r\n\r\n  onDragStart = (event) => {\r\n    // event.dataTransfer.setData(\"text\", event.target.id);\r\n     console.log('onstart event ==> ', event);\r\n    // console.log('nativeEvent ==> ', event.nativeEvent); //<- gets native JS event\r\n    /* ... */\r\n  }\r\n  onDragUpdate = () => {\r\n    /* ... */\r\n  }\r\n  onDragEnd = (result) => {\r\n    // the only one that is required\r\n    const { destination, source, reason } = result;\r\n     console.log('source >>', source);\r\n    //  console.log('Droppable item ID>>',destination.droppableId === source.droppableId);\r\n    // console.log('Index >>',destination.index === source.index);\r\n    // Not a thing to do...\r\n    if (!destination || reason === 'CANCEL') {\r\n      this.setState({\r\n        draggingRowId: null,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      console.log('Droppable item ID>>',destination.droppableId === source.droppableId);\r\n      console.log('Index >>',destination.index === source.index);\r\n    }\r\n\r\n    // const starredProjects = Object.assign([], this.state.starredProjects);\r\n    // console.log('StarredProject >>', starredProjects)\r\n    // const project = this.state.starredProjects[source.index];\r\n    // console.log('Source index >>', source.index);\r\n    // starredProjects.splice(source.index, 1);\r\n    // starredProjects.splice(destination.index, 0, project);\r\n    // this.setState({\r\n    //   starredProjects\r\n    // });\r\n\r\n  }\r\n\r\n  render () {\r\n    const selectedOptionContent = \r\n    {\r\n      background: <BackgroundImages/>,\r\n      file: <UploadFile/>,\r\n      photos: <Photos/>\r\n    }\r\n    [this.state.selectedMenuOption]\r\n    // console.log('selected content background>>', selectedOptionContent)\r\n    console.log('menu option array >>',[this.state.selectedMenuOption]);\r\n    return (\r\n      <section className='mainSection'>\r\n        <DragDropContext\r\n          onBeforeDragStart={this.onBeforeDragStart}\r\n          onDragStart={this.onDragStart}\r\n          onDragUpdate={this.onDragUpdate}\r\n          onDragEnd={this.onDragEnd}\r\n        >\r\n        <Droppable droppableId='droppable' type='DRAWING'>\r\n            {(provided, snapshot) => (\r\n            <div\r\n                className='droppableSection'\r\n                ref={provided.innerRef}\r\n                style={{\r\n                backgroundColor: snapshot.isDraggingOver\r\n                    ? '#ccc'\r\n                    : '#ececec'\r\n                }}\r\n                {...provided.droppableProps}\r\n            >  \r\n                {console.log('Provided >>', provided)}\r\n                <div className='menuSection'>\r\n                    <ClosedLeftMenu selectMenuOption={this.selectMenuOption} />\r\n                </div>\r\n\r\n                    {this.state.isModalOpen && (\r\n                      \r\n                    <SlidingPane\r\n                        id='modal'\r\n                        isOpen={this.state.isModalOpen}\r\n                        onClose={this.toggleState}\r\n                    >\r\n                        <SlideContent content={selectedOptionContent} />\r\n                     </SlidingPane>\r\n                     )} \r\n                <div className='canvasSection'>\r\n                    <div className='drawingCanvas'>\r\n                      <h1>Hello To The world</h1>\r\n                    </div>  \r\n                       \r\n                </div>\r\n            </div>\r\n            )}\r\n        </Droppable>\r\n        </DragDropContext>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Content\r\n"]},"metadata":{},"sourceType":"module"}