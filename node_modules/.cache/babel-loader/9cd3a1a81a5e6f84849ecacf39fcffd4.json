{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/projects/DynamicNewsLetter/src/components/content/content.js\";\nimport React, { Component } from 'react';\nimport './content.css';\nimport SlidingPane from './slidingPane';\nimport ClosedLeftMenu from './closedLeftMenu';\nimport DrawingCanvas from './drawingCanvas';\nimport SlideContent from './slideContent';\nimport BackgroundImages from './backgroundImages';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport UploadFile from './uploadFile';\nimport Photos from './photos';\nimport imagesArray from './initial-data';\nimport Column from './columns';\n\nclass Content extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isModalOpen: false,\n      selectedMenuOption: '',\n      draggingRowId: null,\n      starredProjects: imagesArray\n    };\n\n    this.toggleState = e => {\n      this.setState({\n        isModalOpen: !this.state.isModalOpen\n      });\n    };\n\n    this.selectMenuOption = menuItem => {\n      console.log('selectMenuOption', menuItem);\n      this.setState({\n        selectedMenuOption: menuItem,\n        isModalOpen: !this.state.isModalOpen\n      });\n    };\n\n    this.onBeforeDragStart = () => {\n      /* ... */\n    };\n\n    this.onDragStart = event => {\n      // event.dataTransfer.setData(\"text\", event.target.id);\n      console.log('onstart event ==> ', event); // console.log('nativeEvent ==> ', event.nativeEvent); //<- gets native JS event\n\n      /* ... */\n    };\n\n    this.onDragUpdate = () => {\n      /* ... */\n    };\n\n    this.onDragEnd = result => {\n      // the only one that is required\n      const destination = result.destination,\n            source = result.source,\n            reason = result.reason;\n      console.log('source >>', source);\n      console.log('Destination >>', destination); //  console.log('Droppable item ID>>',destination.droppableId === source.droppableId);\n      // console.log('Index >>',destination.index === source.index);\n      // Not a thing to do...\n\n      if (!destination || reason === 'CANCEL') {\n        this.setState({\n          draggingRowId: null\n        });\n        return;\n      }\n\n      if (destination.droppableId === source.droppableId && destination.index === source.index) {\n        console.log('Droppable item ID>>', destination.droppableId === source.droppableId);\n        console.log('Index >>', destination.index === source.index);\n      }\n\n      const starredProjects = Object.assign([], this.state.starredProjects);\n      console.log('StarredProject >>', starredProjects);\n      const project = this.state.starredProjects[source.index];\n      console.log('Project >>', project);\n      starredProjects.splice(source.index, 1);\n      console.log('StarredProject >>', starredProjects);\n      starredProjects.splice(destination.index, 0, project);\n      this.setState({\n        starredProjects\n      }, () => {\n        console.log('Last State >>', this.state.starredProjects);\n      });\n    };\n  }\n\n  render() {\n    const selectedOptionContent = {\n      background: React.createElement(BackgroundImages, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }),\n      file: React.createElement(UploadFile, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }),\n      photos: React.createElement(Photos, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      })\n    }[this.state.selectedMenuOption]; // console.log('selected content background>>', selectedOptionContent)\n    // console.log('menu option array >>',[this.state.selectedMenuOption]);\n\n    return React.createElement(\"section\", {\n      className: \"mainSection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(DragDropContext, {\n      onBeforeDragStart: this.onBeforeDragStart,\n      onDragStart: this.onDragStart,\n      onDragUpdate: this.onDragUpdate,\n      onDragEnd: this.onDragEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Droppable, {\n      droppableId: \"droppable\",\n      type: \"DRAWING\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, (provided, snapshot) => React.createElement(\"div\", Object.assign({\n      className: \"droppableSection\",\n      ref: provided.innerRef,\n      style: {\n        backgroundColor: snapshot.isDraggingOver ? '#ccc' : '#ececec'\n      }\n    }, provided.droppableProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }), console.log('Provided >>', provided), React.createElement(\"div\", {\n      className: \"menuSection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(ClosedLeftMenu, {\n      selectMenuOption: this.selectMenuOption,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), this.state.isModalOpen && React.createElement(SlidingPane, {\n      id: \"modal\",\n      isOpen: this.state.isModalOpen,\n      onClose: this.toggleState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(SlideContent, {\n      content: selectedOptionContent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"canvasSection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Column, {\n      key: 1,\n      id: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }))))));\n  }\n\n}\n\nexport default Content;","map":{"version":3,"sources":["/Users/mac/Desktop/projects/DynamicNewsLetter/src/components/content/content.js"],"names":["React","Component","SlidingPane","ClosedLeftMenu","DrawingCanvas","SlideContent","BackgroundImages","DragDropContext","Droppable","UploadFile","Photos","imagesArray","Column","Content","state","isModalOpen","selectedMenuOption","draggingRowId","starredProjects","toggleState","e","setState","selectMenuOption","menuItem","console","log","onBeforeDragStart","onDragStart","event","onDragUpdate","onDragEnd","result","destination","source","reason","droppableId","index","Object","assign","project","splice","render","selectedOptionContent","background","file","photos","provided","snapshot","innerRef","backgroundColor","isDraggingOver","droppableProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport './content.css'\r\nimport SlidingPane from './slidingPane'\r\nimport ClosedLeftMenu from './closedLeftMenu'\r\nimport DrawingCanvas from './drawingCanvas'\r\nimport SlideContent from './slideContent'\r\nimport BackgroundImages from './backgroundImages'\r\nimport { DragDropContext,Droppable } from 'react-beautiful-dnd';\r\nimport UploadFile from './uploadFile';\r\nimport Photos from './photos';\r\nimport imagesArray from './initial-data';\r\nimport Column from './columns';\r\n\r\nclass Content extends Component {\r\n  state = {\r\n    isModalOpen: false,\r\n    selectedMenuOption: '',\r\n    draggingRowId: null,\r\n    starredProjects: imagesArray\r\n\r\n  }\r\n\r\n  toggleState = e => {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen\r\n    })\r\n  }\r\n  selectMenuOption = menuItem => {\r\n    console.log('selectMenuOption', menuItem)\r\n    this.setState({\r\n      selectedMenuOption: menuItem,\r\n      isModalOpen: !this.state.isModalOpen\r\n    })\r\n  }\r\n\r\n  onBeforeDragStart = () => {\r\n    /* ... */\r\n  }\r\n\r\n  onDragStart = (event) => {\r\n    // event.dataTransfer.setData(\"text\", event.target.id);\r\n    console.log('onstart event ==> ', event);\r\n    // console.log('nativeEvent ==> ', event.nativeEvent); //<- gets native JS event\r\n    /* ... */\r\n  }\r\n  onDragUpdate = () => {\r\n    /* ... */\r\n  }\r\n  onDragEnd = (result) => {\r\n    // the only one that is required\r\n    const { destination, source, reason } = result;\r\n    console.log('source >>', source);\r\n    console.log('Destination >>', destination);\r\n    //  console.log('Droppable item ID>>',destination.droppableId === source.droppableId);\r\n    // console.log('Index >>',destination.index === source.index);\r\n    // Not a thing to do...\r\n    if (!destination || reason === 'CANCEL') {\r\n      this.setState({\r\n        draggingRowId: null,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      console.log('Droppable item ID>>', destination.droppableId === source.droppableId);\r\n      console.log('Index >>', destination.index === source.index);\r\n    }\r\n\r\n    const starredProjects = Object.assign([], this.state.starredProjects);\r\n    console.log('StarredProject >>', starredProjects)\r\n    const project = this.state.starredProjects[source.index];\r\n    console.log('Project >>', project);\r\n    starredProjects.splice(source.index, 1);\r\n    console.log('StarredProject >>', starredProjects)\r\n    starredProjects.splice(destination.index, 0, project);\r\n    this.setState({\r\n      starredProjects\r\n    },()=>{console.log('Last State >>',this.state.starredProjects)});\r\n\r\n  }\r\n\r\n  render() {\r\n    const selectedOptionContent =\r\n      {\r\n        background: <BackgroundImages />,\r\n        file: <UploadFile />,\r\n        photos: <Photos />\r\n      }\r\n      [this.state.selectedMenuOption]\r\n    // console.log('selected content background>>', selectedOptionContent)\r\n    // console.log('menu option array >>',[this.state.selectedMenuOption]);\r\n    return (\r\n      <section className='mainSection'>\r\n\r\n        <DragDropContext\r\n          onBeforeDragStart={this.onBeforeDragStart}\r\n          onDragStart={this.onDragStart}\r\n          onDragUpdate={this.onDragUpdate}\r\n          onDragEnd={this.onDragEnd}\r\n        >\r\n          {/* {console.log(this.state.starredProjects[columns])} */}\r\n        {/* {console.log('AAAA >>', a.id)} */}\r\n          <Droppable droppableId='droppable' type='DRAWING'>\r\n            {(provided, snapshot) => (\r\n            <div\r\n                className='droppableSection'\r\n                ref={provided.innerRef}\r\n                style={{\r\n                backgroundColor: snapshot.isDraggingOver\r\n                    ? '#ccc'\r\n                    : '#ececec'\r\n                }}\r\n                {...provided.droppableProps}\r\n            >  \r\n                {console.log('Provided >>', provided)}\r\n          <div className='menuSection'>\r\n            <ClosedLeftMenu selectMenuOption={this.selectMenuOption} />\r\n          </div>\r\n\r\n          {this.state.isModalOpen && (\r\n\r\n            <SlidingPane\r\n              id='modal'\r\n              isOpen={this.state.isModalOpen}\r\n              onClose={this.toggleState}\r\n            >\r\n              <SlideContent content={selectedOptionContent} />\r\n            </SlidingPane>\r\n          )}\r\n          <div className='canvasSection'>\r\n              <Column key={1} id={1} />\r\n          </div>\r\n          \r\n          {/* <div className='canvasSection'>\r\n            <div className='drawingCanvas'>\r\n              <h1>Hello To The world</h1>\r\n            </div>\r\n\r\n          </div> */}\r\n          </div>\r\n            )}\r\n        </Droppable>\r\n        </DragDropContext>\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Content\r\n"]},"metadata":{},"sourceType":"module"}